{"version":3,"sources":["../../src/engine/parallax.js"],"names":["App","define","Utils","reference","Vector","layers","zoom","objects","depth","push","Set","renderer","forEach","translation","copy","scale","layer","object","render","pop","filterSet","update","alive"],"mappings":";;;;;;AAAAA,IAAIC,MAAJ,CAAW;AAAA,QAAGC,KAAH,QAAGA,KAAH;AAAA;AAEP,4BAA4C;AAAA,gBAAhCC,SAAgC,uEAApB;AAAA,uBAAM,IAAIC,MAAJ,EAAN;AAAA,aAAoB;;AAAA;;AACxC,iBAAKD,SAAL,GAAiBA,SAAjB;AACA,iBAAKE,MAAL,GAAc,EAAd;AACA,iBAAKC,IAAL,GAAY,CAAZ;AACH;;AANM;AAAA;AAAA,mCAQAH,SARA,EAQW;AACd,qBAAKA,SAAL,GAAiBA,SAAjB;AACA,uBAAO,IAAP;AACH;AAXM;AAAA;AAAA,4CAa+B;AAAA,0CAA3BI,OAA2B;AAAA,oBAA3BA,OAA2B,iCAAjB,EAAiB;AAAA,wCAAbC,KAAa;AAAA,oBAAbA,KAAa,+BAAL,CAAK;;AAClC,qBAAKH,MAAL,CAAYI,IAAZ,CAAiB,EAAEF,SAAS,IAAIG,GAAJ,CAAQH,OAAR,CAAX,EAA6BC,OAAO,IAAIA,KAAxC,EAAjB;AACA,uBAAO,IAAP;AACH;AAhBM;AAAA;AAAA,mCAkBAG,QAlBA,EAkBU;AAAA;;AACb,qBAAKN,MAAL,CAAYO,OAAZ,CAAoB,iBAAS;AACzBD,6BAASF,IAAT,CAAc;AACVI,qCAAa,MAAKV,SAAL,CAAeW,IAAf,GAAsBC,KAAtB,CAA4B,CAACC,MAAMR,KAAnC,CADH;AAEVO,+BAAO,IAAIX,MAAJ,CAAW,MAAKE,IAAhB,EAAsB,MAAKA,IAA3B;AAFG,qBAAd;AAIAU,0BAAMT,OAAN,CAAcK,OAAd,CAAsB;AAAA,+BAAUK,OAAOC,MAAP,CAAcP,QAAd,CAAV;AAAA,qBAAtB;AACAA,6BAASQ,GAAT;AACH,iBAPD;AAQH;AA3BM;AAAA;AAAA,qCA6BE;AACL,qBAAKd,MAAL,CAAYO,OAAZ,CAAoB;AAAA,2BAASV,MAAMkB,SAAN,CAAgBJ,MAAMT,OAAtB,EAA+B,kBAAU;AAClEU,+BAAOI,MAAP;AACA,+BAAOJ,OAAOK,KAAP,EAAP;AACH,qBAH4B,CAAT;AAAA,iBAApB;AAIH;AAlCM;;AAAA;AAAA;AAAA,CAAX","file":"parallax.js","sourcesContent":["App.define(({ Utils }) => class Parallax {\r\n\r\n    constructor(reference = () => new Vector()) {\r\n        this.reference = reference;\r\n        this.layers = [];\r\n        this.zoom = 1;\r\n    }\r\n\r\n    target(reference) {\r\n        this.reference = reference;\r\n        return this;\r\n    }\r\n\r\n    addLayer({ objects = [], depth = 1 }) {\r\n        this.layers.push({ objects: new Set(objects), depth: 1 / depth });\r\n        return this;\r\n    }\r\n\r\n    render(renderer) {\r\n        this.layers.forEach(layer => {\r\n            renderer.push({\r\n                translation: this.reference.copy().scale(-layer.depth),\r\n                scale: new Vector(this.zoom, this.zoom)\r\n            });\r\n            layer.objects.forEach(object => object.render(renderer));\r\n            renderer.pop();\r\n        });\r\n    }\r\n\r\n    update() {\r\n        this.layers.forEach(layer => Utils.filterSet(layer.objects, object => {\r\n            object.update();\r\n            return object.alive();\r\n        }));\r\n    }\r\n\r\n});\r\n"]}